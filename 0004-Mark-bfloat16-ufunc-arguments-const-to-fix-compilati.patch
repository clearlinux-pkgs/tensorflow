From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peter Hawkins <phawkins@google.com>
Date: Mon, 6 Jul 2020 09:22:25 -0700
Subject: [PATCH] Mark bfloat16 ufunc arguments const to fix compilation error
 on Ubuntu 18.04.

PiperOrigin-RevId: 319792979
Change-Id: I8dda8596e76118f86cf50ee45f87334b771d1218
Upstream-Status: Backport [fix for numpy 1.19]
Reference: https://github.com/tensorflow/tensorflow/commit/8ed58f3448
Reference: https://github.com/tensorflow/tensorflow/pull/40728
Reference: https://github.com/tensorflow/tensorflow/issues/43679
---
 tensorflow/compiler/xla/python/bfloat16.cc | 19 ++++++++++---------
 1 file changed, 10 insertions(+), 9 deletions(-)

diff --git a/tensorflow/compiler/xla/python/bfloat16.cc b/tensorflow/compiler/xla/python/bfloat16.cc
index 0b98d0c5..6d80a605 100644
--- a/tensorflow/compiler/xla/python/bfloat16.cc
+++ b/tensorflow/compiler/xla/python/bfloat16.cc
@@ -708,8 +708,8 @@ struct UnaryUFunc {
   static std::vector<int> Types() {
     return {TypeDescriptor<InType>::Dtype(), TypeDescriptor<OutType>::Dtype()};
   }
-  static void Call(char** args, npy_intp* dimensions, npy_intp* steps,
-                   void* data) {
+  static void Call(char** args, const npy_intp* dimensions,
+                   const npy_intp* steps, void* data) {
     const char* i0 = args[0];
     char* o = args[1];
     for (npy_intp k = 0; k < *dimensions; k++) {
@@ -728,8 +728,8 @@ struct UnaryUFunc2 {
     return {TypeDescriptor<InType>::Dtype(), TypeDescriptor<OutType>::Dtype(),
             TypeDescriptor<OutType2>::Dtype()};
   }
-  static void Call(char** args, npy_intp* dimensions, npy_intp* steps,
-                   void* data) {
+  static void Call(char** args, const npy_intp* dimensions,
+                   const npy_intp* steps, void* data) {
     const char* i0 = args[0];
     char* o0 = args[1];
     char* o1 = args[2];
@@ -751,8 +751,8 @@ struct BinaryUFunc {
     return {TypeDescriptor<InType>::Dtype(), TypeDescriptor<InType>::Dtype(),
             TypeDescriptor<OutType>::Dtype()};
   }
-  static void Call(char** args, npy_intp* dimensions, npy_intp* steps,
-                   void* data) {
+  static void Call(char** args, const npy_intp* dimensions,
+                   const npy_intp* steps, void* data) {
     const char* i0 = args[0];
     const char* i1 = args[1];
     char* o = args[2];
@@ -774,8 +774,8 @@ struct BinaryUFunc2 {
     return {TypeDescriptor<InType>::Dtype(), TypeDescriptor<InType2>::Dtype(),
             TypeDescriptor<OutType>::Dtype()};
   }
-  static void Call(char** args, npy_intp* dimensions, npy_intp* steps,
-                   void* data) {
+  static void Call(char** args, const npy_intp* dimensions,
+                   const npy_intp* steps, void* data) {
     const char* i0 = args[0];
     const char* i1 = args[1];
     char* o = args[2];
@@ -795,7 +795,8 @@ struct BinaryUFunc2 {
 template <typename UFunc>
 bool RegisterUFunc(PyObject* numpy, const char* name) {
   std::vector<int> types = UFunc::Types();
-  PyUFuncGenericFunction fn = UFunc::Call;
+  PyUFuncGenericFunction fn =
+      reinterpret_cast<PyUFuncGenericFunction>(UFunc::Call);
   Safe_PyObjectPtr ufunc_obj = make_safe(PyObject_GetAttrString(numpy, name));
   if (!ufunc_obj) {
     return false;
